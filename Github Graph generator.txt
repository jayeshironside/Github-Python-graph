---CODE----
import os
from random import randint
from datetime import datetime, timedelta

# set start and end dates
start_date = datetime(2022, 8, 13)
end_date = datetime.now()

# calculate number of days between start and end dates
days = (end_date - start_date).days

# loop for generating 60 random commits
for i in range(60):

    # generate a random number of days between 0 and the total number of days
    days_ago = randint(0, days)

    # calculate the date for the commit
    commit_date = end_date - timedelta(days=days_ago)

    # format the date string
    date_string = commit_date.strftime('%Y-%m-%d %H:%M:%S')

    # write the commit message to file
    with open('file.txt', 'a') as file:
        file.write(date_string + '\n')

    # add and commit the changes using the date string
    os.system('git add .')
    os.system('git commit --date="' + date_string + '" -m "commit"')

# push the changes to the remote repository
os.system('git push -u origin main')



---STEPS---
1.Create a new GitHub repository where you want to store the code. Make sure you have Git installed on your local machine and you have set up your Git credentials with GitHub.

2.Clone the newly created repository onto your local machine by running the following command in your terminal:

git clone https://github.com/your-username/your-repo.git

Make sure to replace "your-username" and "your-repo" with the actual names of your GitHub account and repository.

3. Change the working directory to the cloned repository by running the following command:

cd your-repo

Again, replace "your-repo" with the actual name of your repository.


4.Open a text editor of your choice and paste the code you provided into a new file. Save the file with a .py extension in the same directory as your cloned repository.

5. Run the Python script by executing the following command in your terminal:

python your-script.py

Make sure to replace "your-script.py" with the actual name of the Python file you created in step 4.


6. Once the script has finished running, use the following command to push the changes to the remote repository on GitHub:

git push origin main

This will update the remote repository with the new commits generated by the Python script.

Note: Make sure to replace "main" with the name of your repository's default branch if it's not "main".